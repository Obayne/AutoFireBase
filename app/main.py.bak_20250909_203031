\nimport os, json, zipfile\n\nfrom PySide6 import QtCore, QtGui, QtWidgets\nfrom PySide6.QtCore import Qt, QPointF, QSize\nfrom PySide6.QtWidgets import (\n    QApplication, QMainWindow, QWidget, QHBoxLayout, QVBoxLayout,\n    QListWidget, QListWidgetItem, QLineEdit, QLabel, QToolBar, QFileDialog,\n    QGraphicsView, QGraphicsPathItem, QMenu, QDockWidget, QCheckBox, QSpinBox, QComboBox, QMessageBox\n)\nfrom PySide6.QtPrintSupport import QPrinter, QPrintDialog\n\nfrom app.scene import GridScene, DEFAULT_GRID_SIZE\nfrom app.device import DeviceItem\nfrom app import catalog\nfrom app.tools import draw as draw_tools\nfrom app.layout import PageFrame, PAGE_SIZES\nfrom app.tools.array import ArraySpec, fill_rect_with_points\n\ntry:\n    from app.tools.dimension import DimensionTool\nexcept Exception:\n    class DimensionTool:\n        def __init__(self, *a, **k): self.active=False\n        def start(self): self.active=True\n        def on_mouse_move(self, *a, **k): pass\n        def on_click(self, *a, **k): self.active=False; return True\n\nAPP_VERSION = "0.6.1-placefix"\nAPP_TITLE = f"Auto-Fire {APP_VERSION}"\nfrom app import units\n\nPREF_DIR = os.path.join(os.path.expanduser("~"), "AutoFire")\nPREF_PATH = os.path.join(PREF_DIR, "preferences.json")\nLOG_DIR = os.path.join(PREF_DIR, "logs")\n\ndef ensure_pref_dir():\n    try:\n        os.makedirs(PREF_DIR, exist_ok=True); os.makedirs(LOG_DIR, exist_ok=True)\n    except Exception:\n        pass\n\ndef load_prefs():\n    ensure_pref_dir()\n    if os.path.exists(PREF_PATH):\n        try:\n            with open(PREF_PATH, "r", encoding="utf-8") as f:\n                return json.load(f)\n        except Exception:\n            pass\n    return {}\n\ndef save_prefs(p):\n    ensure_pref_dir()\n    try:\n        with open(PREF_PATH, "w", encoding="utf-8") as f:\n            json.dump(p, f, indent=2)\n    except Exception:\n        pass\n\ndef apply_theme(theme: str):\n    app = QtWidgets.QApplication.instance()\n    if not app: return\n    if (theme or "").lower() == "light":\n        app.setPalette(app.style().standardPalette())\n        return\n    pal = QtGui.QPalette()\n    pal.setColor(QtGui.QPalette.Window, QtGui.QColor(53,53,53))\n    pal.setColor(QtGui.QPalette.WindowText, Qt.white)\n    pal.setColor(QtGui.QPalette.Base, QtGui.QColor(35,35,35))\n    pal.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53,53,53))\n    pal.setColor(QtGui.QPalette.ToolTipBase, Qt.white)\n    pal.setColor(QtGui.QPalette.ToolTipText, Qt.white)\n    pal.setColor(QtGui.QPalette.Text, Qt.white)\n    pal.setColor(QtGui.QPalette.Button, QtGui.QColor(53,53,53))\n    pal.setColor(QtGui.QPalette.ButtonText, Qt.white)\n    pal.setColor(QtGui.QPalette.BrightText, Qt.red)\n    pal.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42,130,218))\n    pal.setColor(QtGui.QPalette.HighlightedText, Qt.black)\n    app.setPalette(pal)\n\nclass CanvasView(QGraphicsView):\n    def __init__(self, scene, devices_group, wires_group, sketch_group, overlay_group, window_ref):\n        super().__init__(scene)\n        self.setRenderHints(QtGui.QPainter.Antialiasing | QtGui.QPainter.TextAntialiasing)\n        self.setDragMode(QGraphicsView.RubberBandDrag)\n        self.setMouseTracking(True)\n        self.current_proto = None\n        self.devices_group = devices_group\n        self.wires_group = wires_group\n        self.sketch_group = sketch_group\n        self.overlay_group = overlay_group\n        self.ortho = False\n        self.win = window_ref\n\n        # Area-array interaction\n        self.area_array_active = False\n        self.area_first = None\n        self.area_rubber = QtWidgets.QGraphicsRectItem()\n        pen = QtGui.QPen(QtGui.QColor(120,200,255,200)); pen.setStyle(Qt.DashLine); pen.setCosmetic(True)\n        self.area_rubber.setPen(pen); self.area_rubber.setBrush(QtGui.QColor(120,200,255,40))\n        self.area_rubber.setZValue(500); self.area_rubber.setVisible(False)\n        self.area_rubber.setParentItem(self.overlay_group)\n\n        # Crosshair\n        self.cross_v = QtWidgets.QGraphicsLineItem(); self.cross_h = QtWidgets.QGraphicsLineItem()\n        pen2 = QtGui.QPen(QtGui.QColor(160,160,160,190)); pen2.setCosmetic(True); pen2.setStyle(Qt.DashLine)\n        self.cross_v.setPen(pen2); self.cross_h.setPen(pen2)\n        self.cross_v.setParentItem(self.overlay_group); self.cross_h.setParentItem(self.overlay_group)\n        self.show_crosshair = True\n\n    def set_current_device(self, proto: dict):\n        self.current_proto = proto\n        if proto:\n            self.win.statusBar().showMessage(f"Ready to place: {proto.get('name','Device')} â€” click on canvas", 3500)\n\n    def _update_crosshair(self, sp: QPointF):\n        if not self.show_crosshair: return\n        rect = self.scene().sceneRect()\n        self.cross_v.setLine(sp.x(), rect.top(), sp.x(), rect.bottom())\n        self.cross_h.setLine(rect.left(), sp.y(), rect.right(), sp.y())\n        from app import units as _u\n# SAFE import: array helpers (never crash on missing module)
try:
    from app.tools.array import ArraySpec, fill_rect_with_points  # type: ignore
except Exception:
    from dataclasses import dataclass
    from PySide6 import QtCore
    @dataclass
    class ArraySpec:
        spacing_ft: float = 10.0
        offset_ft_x: float = 0.0
        offset_ft_y: float = 0.0
    def fill_rect_with_points(rect_px: QtCore.QRectF, px_per_ft: float, spec: 'ArraySpec'):
        if rect_px.width() <= 0 or rect_px.height() <= 0 or px_per_ft <= 0:
            return []
        step = spec.spacing_ft * px_per_ft
        ox = rect_px.left() + spec.offset_ft_x * px_per_ft
        oy = rect_px.top()  + spec.offset_ft_y * px_per_ft
        pts = []
        y = oy
        while y <= rect_px.bottom() - 1e-6:
            x = ox
            while x <= rect_px.right() - 1e-6:
                pts.append(QtCore.QPointF(x, y))
                x += step
            y += step
        return pts
\n        dx_ft = _u.px_to_ft(sp.x(), self.win.px_per_ft)\n        dy_ft = _u.px_to_ft(sp.y(), self.win.px_per_ft)\n        self.win.statusBar().showMessage(f"x={_u.fmt_ft_inches(dx_ft)}   y={_u.fmt_ft_inches(dy_ft)}   scale={self.win.px_per_ft:.2f} px/ft  snap={self.win.snap_label}")\n\n    def wheelEvent(self, e: QtGui.QWheelEvent):\n        s = 1.15 if e.angleDelta().y() > 0 else 1/1.15\n        self.scale(s, s)\n\n    def keyPressEvent(self, e: QtGui.QKeyEvent):\n        if e.key()==Qt.Key_Shift: self.ortho=True; e.accept(); return\n        if e.key()==Qt.Key_C: self.show_crosshair = not self.show_crosshair; e.accept(); return\n        if e.key()==Qt.Key_G: self.win.set_generic_proto(); e.accept(); return\n        if e.key()==Qt.Key_Delete: self.win.delete_selected(); e.accept(); return\n        if e.key()==Qt.Key_R: self.win.rotate_selected(); e.accept(); return\n        if e.key()==Qt.Key_Escape:\n            if self.area_array_active:\n                self.area_array_active=False; self.area_first=None; self.area_rubber.setVisible(False); e.accept(); return\n            if getattr(self.win, "draw", None): self.win.draw.finish(); e.accept(); return\n        super().keyPressEvent(e)\n\n    def mousePressEvent(self, e: QtGui.QMouseEvent):\n        sp = self.scene().snap(self.mapToScene(e.position().toPoint()))\n        if e.button()==Qt.RightButton:\n            self.win.canvas_menu(e.globalPosition().toPoint()); e.accept(); return\n\n        if e.button()==Qt.LeftButton:\n            # Priority: area-array, drawing, dimension, placement\n            if self.area_array_active:\n                if self.area_first is None:\n                    self.area_first = sp\n                    self.win.statusBar().showMessage("Array: pick opposite corner (Esc to cancel)")\n                else:\n                    rect = QtCore.QRectF(self.area_first, sp).normalized()\n                    self.area_array_active=False; self.area_first=None; self.area_rubber.setVisible(False)\n                    self.win.place_array_in_rect(rect)\n                e.accept(); return\n\n            if getattr(self.win, "draw", None) and self.win.draw.mode != 0:\n                if self.win.draw.on_click(sp, shift_ortho=self.ortho):\n                    self.win.push_history(); e.accept(); return\n\n            if getattr(self.win, "dim_tool", None) and self.win.dim_tool.active:\n                if self.win.dim_tool.on_click(sp):\n                    e.accept(); return\n\n            # If clicking on an existing item, don't place a new one\n            under = self.items(e.position().toPoint())\n            if any(isinstance(x, QtWidgets.QGraphicsItem) and not isinstance(x, QtWidgets.QGraphicsPixmapItem) and x is not self.area_rubber for x in under):\n                super().mousePressEvent(e)\n                return\n\n            # Place device (always works, even if no catalog)\n            d = self.current_proto or {"symbol":"GEN","name":"Generic Device","manufacturer":"Generic","part_number":""}\n            it = DeviceItem(sp.x(), sp.y(), d.get("symbol","?"), d.get("name","Device"), d.get("manufacturer",""), d.get("part_number",""))\n            it.setParentItem(self.devices_group)\n            self.win.push_history()\n            e.accept(); return\n\n        super().mousePressEvent(e)\n\n    def mouseMoveEvent(self, e: QtGui.QMouseEvent):\n        sp = self.mapToScene(e.position().toPoint())\n        self._update_crosshair(sp)\n        if self.area_array_active and self.area_first is not None:\n            rect = QtCore.QRectF(self.area_first, sp).normalized()\n            self.area_rubber.setRect(rect); self.area_rubber.setVisible(True)\n        if getattr(self.win, "draw", None): self.win.draw.on_mouse_move(sp, shift_ortho=self.ortho)\n        if getattr(self.win, "dim_tool", None): self.win.dim_tool.on_mouse_move(sp)\n        super().mouseMoveEvent(e)\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(APP_TITLE)\n        self.resize(1400, 900)\n        self.prefs = load_prefs()\n        self.px_per_ft = float(self.prefs.get("px_per_ft", 12.0))\n        self.snap_label = self.prefs.get("snap_label", "grid")\n        self.snap_step_in = float(self.prefs.get("snap_step_in", 0.0))\n\n        self.devices_all = catalog.load_catalog()\n\n        self.scene = GridScene(int(self.prefs.get("grid", DEFAULT_GRID_SIZE)), 0,0,10000,8000)\n        self.scene.snap_enabled = bool(self.prefs.get("snap", True))\n        self._apply_snap_step_from_inches(self.snap_step_in)\n\n        self.layer_underlay = QtWidgets.QGraphicsItemGroup(); self.layer_underlay.setZValue(-10); self.scene.addItem(self.layer_underlay)\n        self.layer_sketch   = QtWidgets.QGraphicsItemGroup(); self.layer_sketch.setZValue(40);   self.scene.addItem(self.layer_sketch)\n        self.layer_wires    = QtWidgets.QGraphicsItemGroup(); self.layer_wires.setZValue(60);    self.scene.addItem(self.layer_wires)\n        self.layer_devices  = QtWidgets.QGraphicsItemGroup(); self.layer_devices.setZValue(100);  self.scene.addItem(self.layer_devices)\n        self.layer_overlay  = QtWidgets.QGraphicsItemGroup(); self.layer_overlay.setZValue(200);  self.scene.addItem(self.layer_overlay)\n\n        self.view = CanvasView(self.scene, self.layer_devices, self.layer_wires, self.layer_sketch, self.layer_overlay, self)\n\n        self.draw = draw_tools.DrawController(self, self.layer_sketch)\n        try:\n            self.dim_tool = DimensionTool(self, self.layer_overlay)\n        except Exception:\n            self.dim_tool = None\n\n        menubar = self.menuBar()\n        m_file = menubar.addMenu("&File")\n        m_file.addAction("New", self.new_project, QtGui.QKeySequence.New)\n        m_file.addAction("Openâ€¦", self.open_project, QtGui.QKeySequence.Open)\n        m_file.addAction("Save Asâ€¦", self.save_project_as, QtGui.QKeySequence.SaveAs)\n        m_file.addSeparator()\n        m_file.addAction("Import DXF Underlayâ€¦", self.import_dxf_underlay)\n        m_file.addAction("Import Image Underlayâ€¦", self.import_image_underlay)\n        m_file.addSeparator()\n        m_file.addAction("Quit", self.close, QtGui.QKeySequence.Quit)\n\n        m_tools = menubar.addMenu("&Tools")\n        def add_tool(name, cb):\n            act = QtGui.QAction(name, self); act.triggered.connect(cb); m_tools.addAction(act); return act\n        self.act_draw_line    = add_tool("Draw Line",    lambda: self.draw.set_mode(draw_tools.DrawMode.LINE))\n        self.act_draw_rect    = add_tool("Draw Rect",    lambda: self.draw.set_mode(draw_tools.DrawMode.RECT))\n        self.act_draw_circle  = add_tool("Draw Circle",  lambda: self.draw.set_mode(draw_tools.DrawMode.CIRCLE))\n        self.act_draw_poly    = add_tool("Draw Polyline",lambda: self.draw.set_mode(draw_tools.DrawMode.POLYLINE))\n        m_tools.addSeparator()\n        m_tools.addAction("Array in Areaâ€¦", self.start_area_array)\n        if self.dim_tool:\n            m_tools.addAction("Dimension (D)", self.start_dimension)\n\n        m_view = menubar.addMenu("&View")\n        self.act_view_grid = QtGui.QAction("Grid", self, checkable=True); self.act_view_grid.setChecked(True); self.act_view_grid.toggled.connect(self.toggle_grid); m_view.addAction(self.act_view_grid)\n        self.act_view_snap = QtGui.QAction("Snap", self, checkable=True); self.act_view_snap.setChecked(self.scene.snap_enabled); self.act_view_snap.toggled.connect(self.toggle_snap); m_view.addAction(self.act_view_snap)\n        self.act_view_cross = QtGui.QAction("Crosshair (C)", self, checkable=True); self.act_view_cross.setChecked(True); self.act_view_cross.toggled.connect(self.toggle_crosshair); m_view.addAction(self.act_view_cross)\n        m_view.addSeparator()\n        act_scale = QtGui.QAction("Set Pixels per Footâ€¦", self); act_scale.triggered.connect(self.set_px_per_ft); m_view.addAction(act_scale)\n\n        m_help = menubar.addMenu("&Help")\n        m_help.addAction("About AutoFireâ€¦", self.show_about)\n\n        tb = QToolBar("Main"); tb.setIconSize(QSize(16,16)); self.addToolBar(tb)\n        tb.addAction(self.act_view_grid); tb.addAction(self.act_view_snap); tb.addAction(self.act_view_cross)\n\n        left = QWidget(); ll = QVBoxLayout(left)\n        ll.addWidget(QLabel("Device Palette"))\n        self.search = QLineEdit(); self.search.setPlaceholderText("Search name / part numberâ€¦")\n        self.cmb_mfr = QComboBox(); self.cmb_type = QComboBox()\n        ll_top = QHBoxLayout(); ll_top.addWidget(QLabel("Manufacturer:")); ll_top.addWidget(self.cmb_mfr)\n        ll_typ = QHBoxLayout(); ll_typ.addWidget(QLabel("Type:")); ll_typ.addWidget(self.cmb_type)\n        self.list = QListWidget()\n        ll.addLayout(ll_top); ll.addLayout(ll_typ); ll.addWidget(self.search); ll.addWidget(self.list)\n\n        self.devices_all = self.devices_all or []\n        self._populate_filters(); self._refresh_device_list()\n        self.search.textChanged.connect(self._refresh_device_list)\n        self.cmb_mfr.currentIndexChanged.connect(self._refresh_device_list)\n        self.cmb_type.currentIndexChanged.connect(self._refresh_device_list)\n        self.list.itemClicked.connect(self.choose_device)\n\n        # Select first device by default (else generic)\n        if self.list.count() > 0:\n            self.list.setCurrentRow(0)\n            self.choose_device(self.list.item(0))\n        else:\n            self.set_generic_proto()\n\n        splitter = QtWidgets.QSplitter(); splitter.addWidget(left); splitter.addWidget(self.view); splitter.setStretchFactor(1,1)\n        container = QWidget(); lay = QHBoxLayout(container); lay.addWidget(splitter); self.setCentralWidget(container)\n\n        dock = QDockWidget("Layers / Controls", self); panel = QWidget(); form = QVBoxLayout(panel)\n        self.chk_underlay = QCheckBox("Underlay"); self.chk_underlay.setChecked(True); self.chk_underlay.toggled.connect(lambda v: self.layer_underlay.setVisible(v)); form.addWidget(self.chk_underlay)\n        self.chk_sketch = QCheckBox("Sketch"); self.chk_sketch.setChecked(True); self.chk_sketch.toggled.connect(lambda v: self.layer_sketch.setVisible(v)); form.addWidget(self.chk_sketch)\n        self.chk_wires = QCheckBox("Wiring"); self.chk_wires.setChecked(True); self.chk_wires.toggled.connect(lambda v: self.layer_wires.setVisible(v)); form.addWidget(self.chk_wires)\n        self.chk_devices = QCheckBox("Devices"); self.chk_devices.setChecked(True); self.chk_devices.toggled.connect(lambda v: self.layer_devices.setVisible(v)); form.addWidget(self.chk_devices)\n        form.addWidget(QLabel("Grid Size"))\n        self.spin_grid = QSpinBox(); self.spin_grid.setRange(2, 500); self.spin_grid.setValue(self.scene.grid_size); self.spin_grid.valueChanged.connect(self.change_grid_size); form.addWidget(self.spin_grid)\n        panel.setLayout(form); dock.setWidget(panel); self.addDockWidget(Qt.RightDockWidgetArea, dock)\n\n        # SHORTCUTS\n        QtGui.QShortcut(QtGui.QKeySequence("Ctrl+Z"), self, activated=self.undo)\n        QtGui.QShortcut(QtGui.QKeySequence("Ctrl+Y"), self, activated=self.redo)\n        if self.dim_tool:\n            QtGui.QShortcut(QtGui.QKeySequence("D"), self, activated=self.start_dimension)\n        QtGui.QShortcut(QtGui.QKeySequence("Delete"), self, activated=self.delete_selected)\n        QtGui.QShortcut(QtGui.QKeySequence("Ctrl+D"), self, activated=self.duplicate_selected)\n        QtGui.QShortcut(QtGui.QKeySequence("G"), self, activated=self.set_generic_proto)\n\n        self.history = []; self.history_index = -1\n        self.push_history()\n\n    # ---- palette ----\n    def _populate_filters(self):\n        def list_mfrs(devs):\n            s = set(d.get("manufacturer","") for d in devs if d.get("manufacturer"))\n            return ["(Any)"] + sorted(s) if s else ["(Any)"]\n        def list_types(devs):\n            s = set(d.get("type","") for d in devs if d.get("type"))\n            return ["(Any)"] + sorted(s) if s else ["(Any)"]\n\n        mfrs = list_mfrs(self.devices_all)\n        types = list_types(self.devices_all)\n        self.cmb_mfr.clear(); self.cmb_mfr.addItems(mfrs)\n        self.cmb_type.clear(); self.cmb_type.addItems(types)\n\n    def _refresh_device_list(self):\n        q = self.search.text().lower().strip()\n        want_mfr = self.cmb_mfr.currentText()\n        want_type = self.cmb_type.currentText()\n        self.list.clear()\n        for d in self.devices_all:\n            if want_mfr and want_mfr != "(Any)" and d.get("manufacturer") != want_mfr: continue\n            if want_type and want_type != "(Any)" and d.get("type") != want_type: continue\n            txt = f"{d.get('name','Device')} ({d.get('symbol','?')})"\n            if q and q not in txt.lower() and q not in (d.get('part_number','').lower()): continue\n            it = QListWidgetItem(txt); it.setData(Qt.UserRole, d); self.list.addItem(it)\n\n    def choose_device(self, it: QListWidgetItem):\n        self.view.set_current_device(it.data(Qt.UserRole)); self.statusBar().showMessage(f"Selected: {it.data(Qt.UserRole).get('name','Device')}")\n\n    # ---- tools ----\n    def start_area_array(self):\n        self.view.area_array_active = True\n        self.view.area_first = None\n        self.statusBar().showMessage("Array: click first corner, then opposite corner (Esc to cancel)")\n\n    def place_array_in_rect(self, rect: QtCore.QRectF):\n        proto = self.view.current_proto or {"symbol":"GEN","name":"Generic Device","manufacturer":"Generic","part_number":""}\n        spacing_ft = self.snap_step_in/12.0 if self.snap_step_in>0 else 10.0\n        pts = fill_rect_with_points(rect, self.px_per_ft, ArraySpec(spacing_ft=spacing_ft))\n        for p in pts:\n            it = DeviceItem(p.x(), p.y(), proto.get("symbol","?"), proto.get("name","Device"), proto.get("manufacturer",""), proto.get("part_number",""))\n            it.setParentItem(self.layer_devices)\n        self.push_history()\n        self.statusBar().showMessage(f"Placed {len(pts)} devices")\n\n    # ---- view toggles ----\n    def toggle_grid(self, on: bool): self.scene.show_grid = bool(on); self.scene.update()\n    def toggle_snap(self, on: bool): self.scene.snap_enabled = bool(on)\n    def toggle_crosshair(self, on: bool): self.view.show_crosshair = bool(on)\n\n    def set_px_per_ft(self):\n        val, ok = QtWidgets.QInputDialog.getDouble(self, "Scale", "Pixels per foot", self.px_per_ft, 1.0, 1000.0, 2)\n        if ok:\n            self.px_per_ft = float(val)\n            self.prefs["px_per_ft"] = self.px_per_ft\n            save_prefs(self.prefs)\n            self._apply_snap_step_from_inches(self.snap_step_in)\n\n    def _apply_snap_step_from_inches(self, inches: float):\n        if inches <= 0:\n            self.scene.snap_step_px = 0.0\n            self.snap_label = "grid"\n        else:\n            ft = inches / 12.0\n            self.scene.snap_step_px = (ft * self.px_per_ft)\n            self.snap_label = f'{int(inches)}"'\n        self.prefs["snap_step_in"] = inches\n        self.prefs["snap_label"] = self.snap_label\n        save_prefs(self.prefs)\n\n    def set_snap_inches(self, inches: float):\n        self._apply_snap_step_from_inches(inches)\n\n    # ---- context menu ----\n    def canvas_menu(self, global_pos):\n        menu = QMenu(self)\n        sel = [it for it in self.scene.selectedItems() if isinstance(it, DeviceItem)]\n        if sel:\n            d = sel[0]\n            act_prop = menu.addAction("Propertiesâ€¦")\n            act_dup = menu.addAction("Duplicate")\n            act_del = menu.addAction("Delete")\n            act_front = menu.addAction("Bring to Front")\n            act_back = menu.addAction("Send to Back")\n            act_lock = menu.addAction("Lock" if not getattr(d, "locked", False) else "Unlock")\n\n            act = menu.exec(global_pos)\n            if act == act_prop:\n                self.edit_device(d)\n            elif act == act_dup:\n                self.duplicate_selected()\n            elif act == act_del:\n                self.delete_selected()\n            elif act == act_front:\n                d.setZValue(d.zValue()+10); self.push_history()\n            elif act == act_back:\n                d.setZValue(d.zValue()-10); self.push_history()\n            elif act == act_lock:\n                d.set_locked(not getattr(d, "locked", False)); self.push_history()\n        else:\n            menu.addAction("Array in Areaâ€¦", self.start_area_array)\n            menu.addAction("Clear Underlay", self.clear_underlay)\n            menu.exec(global_pos)\n\n    def edit_device(self, item: DeviceItem):\n        try:\n            from app.dialogs.device_props import DevicePropsDialog\n        except Exception:\n            QMessageBox.information(self, "Properties", "Properties dialog unavailable in this build.")\n            return\n        dlg = DevicePropsDialog(self, item, self.px_per_ft)\n        if dlg.exec() == QtWidgets.QDialog.Accepted:\n            v = dlg.values()\n            item.set_label_text(v["name"] or item.name)\n            item.name = v["name"] or item.name\n            item.symbol = v["symbol"] or item.symbol\n            item.manufacturer = v["manufacturer"] or item.manufacturer\n            item.part_number = v["part_number"] or item.part_number\n            dx, dy = v["label_offset_px"]; item.set_label_offset(dx, dy)\n            self.push_history()\n\n    # ---- serialize ----\n    def serialize_state(self):\n        devs = []\n        for it in self.layer_devices.childItems():\n            if isinstance(it, DeviceItem): devs.append(it.to_json())\n        return {"grid":int(self.scene.grid_size), "snap":bool(self.scene.snap_enabled),\n                "px_per_ft": float(self.px_per_ft),\n                "snap_step_in": float(self.snap_step_in),\n                "underlay":{"opacity":1.0},"devices":devs,"wires":[]}\n\n    def load_state(self, data):\n        for it in list(self.layer_devices.childItems()): it.scene().removeItem(it)\n        for it in list(self.layer_wires.childItems()): it.scene().removeItem(it)\n        self.scene.snap_enabled = bool(data.get("snap", True)); self.act_view_snap.setChecked(self.scene.snap_enabled)\n        self.scene.grid_size = int(data.get("grid", DEFAULT_GRID_SIZE)); self.spin_grid.setValue(self.scene.grid_size)\n        self.px_per_ft = float(data.get("px_per_ft", self.px_per_ft))\n        self.snap_step_in = float(data.get("snap_step_in", self.snap_step_in))\n        self._apply_snap_step_from_inches(self.snap_step_in)\n        for d in data.get("devices", []):\n            it = DeviceItem.from_json(d); it.setParentItem(self.layer_devices)\n\n    def push_history(self):\n        if self.history_index < len(self.history)-1: self.history = self.history[:self.history_index+1]\n        self.history.append(self.serialize_state()); self.history_index += 1\n\n    def undo(self):\n        if self.history_index>0:\n            self.history_index-=1; self.load_state(self.history[self.history_index]); self.statusBar().showMessage("Undo")\n\n    def redo(self):\n        if self.history_index < len(self.history)-1:\n            self.history_index+=1; self.load_state(self.history[self.history_index]); self.statusBar().showMessage("Redo")\n\n    # ---- underlay ----\n    def _build_underlay_path(self, msp):\n        path = QtGui.QPainterPath()\n        for e in msp:\n            t = e.dxftype()\n            if t=="LINE":\n                sx,sy,_=e.dxf.start; ex,ey,_=e.dxf.end\n                path.moveTo(float(sx),float(sy)); path.lineTo(float(ex),float(ey))\n            elif t=="CIRCLE":\n                cx,cy,_=e.dxf.center; r=float(e.dxf.radius); rect=QtCore.QRectF(cx-r, cy-r, 2*r, 2*r); path.addEllipse(rect)\n            elif t=="ARC":\n                cx,cy,_=e.dxf.center; r=float(e.dxf.radius)\n                start=float(e.dxf.start_angle); end=float(e.dxf.end_angle); rect=QtCore.QRectF(cx-r, cy-r, 2*r, 2*r)\n                path.arcMoveTo(rect, start); path.arcTo(rect, start, end-start)\n        return path\n\n    def _apply_underlay_path(self, path):\n        for it in list(self.layer_underlay.childItems()): it.scene().removeItem(it)\n        pen=QtGui.QPen(Qt.darkGray); pen.setCosmetic(True); pen.setWidthF(0)\n        item=QGraphicsPathItem(path); item.setPen(pen); item.setFlag(QtWidgets.QGraphicsItem.ItemIsSelectable, False); item.setParentItem(self.layer_underlay)\n\n    def _load_underlay(self, path):\n        try:\n            import ezdxf\n        except Exception as ex:\n            QMessageBox.critical(self,"DXF Import Error","DXF support (ezdxf) is not available in this build.\n\n"+str(ex))\n            return\n        try:\n            doc = ezdxf.readfile(path); msp = doc.modelspace(); p = self._build_underlay_path(msp); self._apply_underlay_path(p)\n        except Exception as ex:\n            QMessageBox.critical(self,"DXF Import Error", str(ex))\n\n    def import_dxf_underlay(self):\n        p,_ = QFileDialog.getOpenFileName(self,"Import DXF Underlay","","DXF Files (*.dxf)")\n        if not p: return\n        self._load_underlay(p)\n\n    def import_image_underlay(self):\n        p,_ = QFileDialog.getOpenFileName(self,"Import Image Underlay","","Images (*.png *.jpg *.jpeg *.bmp *.tif *.tiff)")\n        if not p: return\n        img = QtGui.QImage(p)\n        if img.isNull():\n            QMessageBox.critical(self,"Image Import Error","Could not read the selected image.")\n            return\n        pix = QtGui.QPixmap.fromImage(img)\n        item = QtWidgets.QGraphicsPixmapItem(pix)\n        item.setOpacity(0.85)\n        item.setZValue(-15)\n        item.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable, True)\n        item.setParentItem(self.layer_underlay)\n\n    def clear_underlay(self):\n        for it in list(self.layer_underlay.childItems()): it.scene().removeItem(it)\n\n    def new_project(self):\n        self.clear_underlay()\n        for it in list(self.layer_devices.childItems()): it.scene().removeItem(it)\n        for it in list(self.layer_wires.childItems()): it.scene().removeItem(it)\n        self.push_history(); self.statusBar().showMessage("New project")\n\n    def save_project_as(self):\n        p,_=QFileDialog.getSaveFileName(self,"Save Project As","","AutoFire Bundle (*.autofire)")\n        if not p: return\n        if not p.lower().endswith(".autofire"): p += ".autofire"\n        try:\n            data=self.serialize_state()\n            with zipfile.ZipFile(p,"w",compression=zipfile.ZIP_DEFLATED) as z:\n                z.writestr("project.json", json.dumps(data, indent=2))\n            self.statusBar().showMessage(f"Saved: {os.path.basename(p)}")\n        except Exception as ex:\n            QMessageBox.critical(self,"Save Project Error", str(ex))\n\n    def open_project(self):\n        p,_=QFileDialog.getOpenFileName(self,"Open Project","","AutoFire Bundle (*.autofire)")\n        if not p: return\n        try:\n            with zipfile.ZipFile(p,"r") as z:\n                data=json.loads(z.read("project.json").decode("utf-8"))\n            self.load_state(data); self.push_history(); self.statusBar().showMessage(f"Opened: {os.path.basename(p)}")\n        except Exception as ex:\n            QMessageBox.critical(self,"Open Project Error", str(ex))\n\n    def change_grid_size(self, v: int):\n        self.scene.grid_size = int(v); self.scene.update()\n\n    def fit_view_to_content(self):\n        rect=self.scene.itemsBoundingRect().adjusted(-100,-100,100,100)\n        if rect.isNull(): rect=QtCore.QRectF(0,0,1000,800)\n        self.view.fitInView(rect, Qt.KeepAspectRatio)\n\n    def start_dimension(self):\n        if self.dim_tool: self.dim_tool.start()\n\n    # Selection ops\n    def delete_selected(self):\n        for it in list(self.scene.selectedItems()):\n            if isinstance(it, DeviceItem) and getattr(it, "locked", False):\n                continue\n            it.scene().removeItem(it)\n        self.push_history()\n\n    def duplicate_selected(self):\n        sel = [it for it in self.scene.selectedItems() if isinstance(it, DeviceItem)]\n        for d in sel:\n            it = DeviceItem(d.pos().x()+10, d.pos().y()+10, d.symbol, d.name, d.manufacturer, d.part_number)\n            it.setParentItem(self.layer_devices)\n        self.push_history()\n\n    def set_generic_proto(self):\n        self.view.set_current_device({"symbol":"GEN","name":"Generic Device","manufacturer":"Generic","part_number":""})\n\n    def show_about(self):\n        QtWidgets.QMessageBox.information(self,"About", f"Auto-Fire\nVersion {APP_VERSION}")\n\n# factory used by boot.py\ndef create_window():\n    return MainWindow()\n\ndef main():\n    app = QApplication([])\n    # theme\n    prefs = load_prefs()\n    apply_theme(prefs.get("theme","dark"))\n    win = create_window()\n    win.show()\n    app.exec()\n\nif __name__ == "__main__":\n    main()