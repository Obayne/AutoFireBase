import os, json, zipfile
from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt, QPointF, QSize
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QHBoxLayout, QVBoxLayout,
    QListWidget, QListWidgetItem, QLineEdit, QLabel, QToolBar, QFileDialog,
    QGraphicsView, QMenu)

from app.scene import GridScene, DEFAULT_GRID_SIZE
from app.device import DeviceItem
from app.tools.array import ArraySpec, fill_rect_with_points

# helpers
def ft_to_px(ft: float, px_per_ft: float) -> float: return ft*px_per_ft
def px_to_ft(px: float, px_per_ft: float) -> float: return px/px_per_ft
def fmt_ft_inches(ft: float) -> str:
    sign = "-" if ft<0 else ""; ft=abs(ft); whole=int(ft); inches=(ft-whole)*12.0
    return f"{sign}{whole}'-{inches:.1f}\""

CATALOG = [
    {"symbol":"S","name":"Smoke Detector","type":"Detector","manufacturer":"(generic)","part_number":"SMK-001"},
    {"symbol":"H","name":"Heat Detector","type":"Detector","manufacturer":"(generic)","part_number":"HEAT-001"},
    {"symbol":"AV","name":"Horn/Strobe","type":"Notification","manufacturer":"(generic)","part_number":"AV-001"},
    {"symbol":"SP","name":"Speaker","type":"Notification","manufacturer":"(generic)","part_number":"SPK-001"},
]

APP_VERSION = "0.6.4-dev"
APP_TITLE   = f"Auto-Fire {APP_VERSION}"

PREF_DIR  = os.path.join(os.path.expanduser("~"), "AutoFire"); os.makedirs(PREF_DIR, exist_ok=True)
PREF_PATH = os.path.join(PREF_DIR, "preferences.json")

def load_prefs():
    try:
        with open(PREF_PATH,"r",encoding="utf-8") as f: return json.load(f)
    except Exception: return {}
def save_prefs(p):
    try:
        with open(PREF_PATH,"w",encoding="utf-8") as f: json.dump(p,f,indent=2)
    except Exception: pass

class CanvasView(QGraphicsView):
    def __init__(self, scene, devices_group, window_ref):
        super().__init__(scene)
        self.setRenderHints(QtGui.QPainter.Antialiasing | QtGui.QPainter.TextAntialiasing)
        self.setMouseTracking(True)
        self.setDragMode(QGraphicsView.RubberBandDrag)
        self.devices_group = devices_group
        self.win = window_ref
        self.current_proto = None
        # crosshair
        self.cross_v = QtWidgets.QGraphicsLineItem(); self.cross_h = QtWidgets.QGraphicsLineItem()
        pen = QtGui.QPen(QtGui.QColor(130,130,130,160)); pen.setCosmetic(True); pen.setStyle(Qt.DashLine)
        for ln in (self.cross_v,self.cross_h): ln.setPen(pen); ln.setZValue(500); scene.addItem(ln)

    def set_current_device(self, proto: dict): self.current_proto = proto

    def _update_cross(self, p: QPointF):
        r = self.scene().sceneRect()
        self.cross_v.setLine(p.x(), r.top(), p.x(), r.bottom())
        self.cross_h.setLine(r.left(), p.y(), r.right(), p.y())
        xft = px_to_ft(p.x(), self.win.px_per_ft); yft = px_to_ft(p.y(), self.win.px_per_ft)
        self.win.statusBar().showMessage(f"x={fmt_ft_inches(xft)}  y={fmt_ft_inches(yft)}  scale={self.win.px_per_ft:.2f} px/ft")

    def wheelEvent(self, e: QtGui.QWheelEvent):
        s = 1.15 if e.angleDelta().y()>0 else 1/1.15
        self.scale(s, s)

    def mouseMoveEvent(self, e: QtGui.QMouseEvent):
        sp = self.mapToScene(e.position().toPoint())
        self._update_cross(sp)
        super().mouseMoveEvent(e)

    def mousePressEvent(self, e: QtGui.QMouseEvent):
        sp = self.mapToScene(e.position().toPoint())
        sp = self.scene().snap(sp)
        if e.button()==Qt.LeftButton:
            if self.win._array_rect_start is not None:
                self.win._handle_array_click(sp); e.accept(); return
            if self.current_proto:
                d = self.current_proto
                it = DeviceItem(sp.x(), sp.y(), d["symbol"], d["name"],
                                d.get("manufacturer",""), d.get("part_number",""))
                it.setParentItem(self.devices_group)
                self.win.statusBar().showMessage(f"Placed: {d['name']}")
                e.accept(); return
        elif e.button()==Qt.RightButton:
            self.win.canvas_menu(e.globalPosition().toPoint()); e.accept(); return
        super().mousePressEvent(e)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(APP_TITLE); self.resize(1400, 900)
        self.prefs = load_prefs()
        self.px_per_ft = float(self.prefs.get("px_per_ft", 12.0))

        # dark theme
        pal = self.palette()
        pal.setColor(pal.Window, QtGui.QColor(32,32,36))
        pal.setColor(pal.Base,   QtGui.QColor(26,26,28))
        pal.setColor(pal.Text,   QtCore.Qt.white); pal.setColor(pal.WindowText, QtCore.Qt.white)
        pal.setColor(pal.Button, QtGui.QColor(48,48,52)); pal.setColor(pal.ButtonText, QtCore.Qt.white)
        self.setPalette(pal)

        self.scene = GridScene(int(self.prefs.get("grid", DEFAULT_GRID_SIZE)), 0,0,12000,9000)
        self.scene.snap_enabled = True
        self.scene.setSceneRect(0,0,12000,9000)

        self.layer_devices = QtWidgets.QGraphicsItemGroup(); self.layer_devices.setZValue(100); self.scene.addItem(self.layer_devices)
        self.view = CanvasView(self.scene, self.layer_devices, self)
        self._array_rect_start = None

        # left panel
        left = QWidget(); lv = QVBoxLayout(left)
        lv.addWidget(QLabel("Device Palette"))
        self.search = QLineEdit(); self.search.setPlaceholderText("Search…"); lv.addWidget(self.search)
        self.list = QListWidget(); lv.addWidget(self.list, 1)
        self._refresh_device_list()
        self.search.textChanged.connect(self._refresh_device_list)
        self.list.itemClicked.connect(self.choose_device)

        # toolbar
        tb = QToolBar("Main"); tb.setIconSize(QSize(16,16)); self.addToolBar(tb)
        act_fit = QtGui.QAction("Fit (F2)", self); act_fit.triggered.connect(self.fit_view_to_content); tb.addAction(act_fit)
        act_arr = QtGui.QAction("Array in Area…", self); act_arr.triggered.connect(self.array_in_area); tb.addAction(act_arr)
        tb.addSeparator()
        act_snap = QtGui.QAction("Snap", self, checkable=True); act_snap.setChecked(self.scene.snap_enabled)
        act_snap.toggled.connect(lambda v: setattr(self.scene, "snap_enabled", bool(v))); tb.addAction(act_snap)

        # menu
        menubar = self.menuBar()
        m_file = menubar.addMenu("&File")
        m_file.addAction("Open…", self.open_project, QtGui.QKeySequence.Open)
        m_file.addAction("Save As…", self.save_project_as, QtGui.QKeySequence.SaveAs)
        m_tools = menubar.addMenu("&Tools")
        m_tools.addAction("Array in Area…", self.array_in_area)
        m_help = menubar.addMenu("&Help")
        m_help.addAction("About", lambda: QtWidgets.QMessageBox.information(self,"About", APP_TITLE))

        # shortcuts
        QtGui.QShortcut(QtGui.QKeySequence("F2"), self, activated=self.fit_view_to_content)

        # layout
        splitter = QtWidgets.QSplitter(); splitter.addWidget(left); splitter.addWidget(self.view); splitter.setStretchFactor(1,1)
        container = QWidget(); lay = QHBoxLayout(container); lay.addWidget(splitter); self.setCentralWidget(container)
        self.statusBar().showMessage("Ready")

    # palette
    def _refresh_device_list(self):
        q = (self.search.text() or "").lower().strip()
        self.list.clear()
        for d in CATALOG:
            txt = f"{d['name']} ({d['symbol']})"
            if q and q not in txt.lower(): continue
            it = QListWidgetItem(txt); it.setData(Qt.UserRole, d); self.list.addItem(it)

    def choose_device(self, it: QListWidgetItem):
        proto = it.data(Qt.UserRole); self.view.set_current_device(proto)
        self.statusBar().showMessage(f"Selected: {proto['name']} — left-click to place")

    # arrays
    def array_in_area(self):
        self._array_rect_start = None
        self.statusBar().showMessage("Array: click first corner, then opposite corner")

    def _handle_array_click(self, p: QPointF):
        if self._array_rect_start is None:
            self._array_rect_start = p; self.statusBar().showMessage("Array: click opposite corner"); return
        p0, p1 = self._array_rect_start, p; self._array_rect_start = None
        rect = QtCore.QRectF(QtCore.QPointF(min(p0.x(),p1.x()), min(p0.y(),p1.y())),
                             QtCore.QPointF(max(p0.x(),p1.x()), max(p0.y(),p1.y())))
        spec = ArraySpec(spacing_ft=10.0)  # default; UI later
        pts  = fill_rect_with_points(rect, self.px_per_ft, spec)
        if not pts: self.statusBar().showMessage("No points generated (spacing/scale?)"); return
        proto = self.view.current_proto or CATALOG[0]
        for pt in pts:
            DeviceItem(pt.x(), pt.y(), proto["symbol"], proto["name"]).setParentItem(self.layer_devices)
        self.statusBar().showMessage(f"Array placed: {len(pts)} devices")

    # save/load
    def serialize_state(self):
        devs=[]
        for it in self.layer_devices.childItems():
            if isinstance(it, DeviceItem): devs.append(it.to_json())
        return {"grid":int(self.scene.grid_size), "snap":bool(self.scene.snap_enabled),
                "px_per_ft": float(self.px_per_ft), "devices":devs}

    def save_project_as(self):
        p,_=QFileDialog.getSaveFileName(self,"Save Project As","","AutoFire Bundle (*.autofire)")
        if not p: return
        if not p.lower().endswith(".autofire"): p += ".autofire"
        data=self.serialize_state()
        with zipfile.ZipFile(p,"w",compression=zipfile.ZIP_DEFLATED) as z:
            z.writestr("project.json", json.dumps(data, indent=2))
        self.statusBar().showMessage(f"Saved: {os.path.basename(p)}")

    def open_project(self):
        p,_=QFileDialog.getOpenFileName(self,"Open Project","","AutoFire Bundle (*.autofire)")
        if not p: return
        with zipfile.ZipFile(p,"r") as z:
            data=json.loads(z.read("project.json").decode("utf-8"))
        for it in list(self.layer_devices.childItems()): it.scene().removeItem(it)
        for d in data.get("devices", []):
            DeviceItem(float(d.get("x",0)), float(d.get("y",0)), d.get("symbol","?"), d.get("name","Device")).setParentItem(self.layer_devices)
        self.statusBar().showMessage(f"Opened: {os.path.basename(p)}")

    def canvas_menu(self, global_pos):
        m = QMenu(self); m.addAction("Fit view (F2)", self.fit_view_to_content); m.exec(global_pos)

    def fit_view_to_content(self):
        rect=self.scene.itemsBoundingRect().adjusted(-100,-100,100,100)
        if rect.isNull(): rect=QtCore.QRectF(0,0,2000,1500)
        self.view.fitInView(rect, Qt.KeepAspectRatio)

def create_window(): return MainWindow()

def main():
    app = QApplication([])
    w = create_window(); w.show(); app.exec()
