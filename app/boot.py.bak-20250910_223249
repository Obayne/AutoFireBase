# app/boot.py â€” hardened entry that avoids "minimal window" fallback surprises.
import os, sys, traceback, time

# Ensure project root is on sys.path when running from source
HERE = os.path.dirname(__file__)
ROOT = os.path.abspath(os.path.join(HERE, os.pardir))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

# In frozen EXE, include PyInstaller's _MEIPASS if present
if getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS"):
    meipass = getattr(sys, "_MEIPASS", None)
    if meipass and meipass not in sys.path:
        sys.path.insert(0, meipass)

def log_startup_error(msg: str):
    try:
        base = os.path.join(os.path.expanduser("~"), "AutoFire", "logs")
        os.makedirs(base, exist_ok=True)
        stamp = time.strftime("%Y%m%d_%H%M%S")
        p = os.path.join(base, f"startup_error_{stamp}.log")
        with open(p, "w", encoding="utf-8") as f:
            f.write("Startup error:\n\n" + msg + "\n")
        return p
    except Exception:
        return None

def main():
    try:
        from PySide6 import QtWidgets
    except Exception as ex:
        path = log_startup_error(traceback.format_exc())
        raise

    try:
        from app.main import create_window
    except Exception:
        # Log full traceback, then show a minimal window so you see *something*
        tb = traceback.format_exc()
        log_startup_error(tb)
        # Minimal window
        app = QtWidgets.QApplication([])
        w = QtWidgets.QWidget()
        w.setWindowTitle("Auto-Fire (fallback)")
        w.resize(520, 260)
        from PySide6 import QtCore, QtGui
        lab = QtWidgets.QLabel("Main UI failed to load.\n\nSee latest file in ~/AutoFire/logs for details.\n"
                               "Run:  py -3 -m app.boot  from repo root\n"
                               "to surface import errors in the console.")
        lab.setAlignment(QtCore.Qt.AlignCenter)
        lay = QtWidgets.QVBoxLayout(w); lay.addWidget(lab)
        w.show(); app.exec()
        return

    # Normal path
    app = QtWidgets.QApplication([])
    w = create_window()
    w.show()
    app.exec()

if __name__ == "__main__":
    main()
