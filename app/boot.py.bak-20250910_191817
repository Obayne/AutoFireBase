# Robust loader that works when run as a module (-m app.boot) or as a script (py app\boot.py)
import sys, importlib, importlib.util, types
from pathlib import Path
from PySide6 import QtWidgets
from core.error_hook import install as install_error_hook, write_crash_log

install_error_hook()

def _import_app_main():
    # Try normal import first
    try:
        return importlib.import_module("app.main")
    except Exception:
        pass

    # Running from source as a script: create synthetic 'app' package and load app/main.py
    here = Path(__file__).resolve().parent
    direct = here / "main.py"
    if direct.exists():
        if "app" not in sys.modules:
            pkg = types.ModuleType("app")
            pkg.__path__ = [str(here)]
            pkg.__package__ = "app"
            sys.modules["app"] = pkg
        spec = importlib.util.spec_from_file_location("app.main", str(direct))
        mod  = importlib.util.module_from_spec(spec)  # type: ignore
        assert spec and spec.loader
        spec.loader.exec_module(mod)                  # type: ignore[attr-defined]
        sys.modules["app.main"] = mod
        return mod

    raise ModuleNotFoundError("app.main")

def main():
    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])
    try:
        m = _import_app_main()
        create_window = getattr(m, "create_window", None)
        if callable(create_window):
            w = create_window()
            w.show()
            app.exec()
            return
        from app.minwin import MinimalWindow
        w = MinimalWindow()
        w.show()
        app.exec()
    except Exception:
        import traceback
        tb = traceback.format_exc()
        p = write_crash_log(tb)
        try:
            QtWidgets.QMessageBox.critical(None, "Startup Error", f"{tb}\n\nSaved: {p}")
        except Exception:
            pass

if __name__ == "__main__":
    main()
