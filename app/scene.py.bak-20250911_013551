from PySide6 import QtCore, QtGui, QtWidgets

DEFAULT_GRID_SIZE = 24  # pixels between minor lines

class GridScene(QtWidgets.QGraphicsScene):
    def __init__(self, grid_size=DEFAULT_GRID_SIZE, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.grid_size = max(2, int(grid_size))
        self.show_grid = True
        self.snap_enabled = True
        self.snap_step_px = 0.0  # if >0, overrides grid intersections

        # Colors tuned for dark theme
        self.col_minor = QtGui.QColor(70, 70, 80)     # minor
        self.col_major = QtGui.QColor(95, 95, 110)    # every 5th
        self.col_axis  = QtGui.QColor(150, 150, 170)  # axes

    # simple grid snap
    def snap(self, pt: QtCore.QPointF) -> QtCore.QPointF:
        if not self.snap_enabled:
            return pt
        if self.snap_step_px and self.snap_step_px > 0:
            s = self.snap_step_px
            x = round(pt.x()/s)*s
            y = round(pt.y()/s)*s
            return QtCore.QPointF(x, y)
        # snap to grid intersections
        g = self.grid_size
        x = round(pt.x()/g)*g
        y = round(pt.y()/g)*g
        return QtCore.QPointF(x, y)

    def drawBackground(self, painter: QtGui.QPainter, rect: QtCore.QRectF):
        super().drawBackground(painter, rect)
        if not self.show_grid or self.grid_size <= 0:
            return

        g = self.grid_size
        left = int(rect.left()) - (int(rect.left()) % g)
        top  = int(rect.top())  - (int(rect.top())  % g)

        # draw minor/major grid
        pen_minor = QtGui.QPen(self.col_minor); pen_minor.setCosmetic(True)
        pen_major = QtGui.QPen(self.col_major); pen_major.setCosmetic(True)
        painter.save()
        # verticals
        x = left
        idx = 0
        while x < rect.right():
            painter.setPen(pen_major if (idx % 5 == 0) else pen_minor)
            painter.drawLine(int(x), int(rect.top()), int(x), int(rect.bottom()))
            x += g; idx += 1
        # horizontals
        y = top
        idy = 0
        while y < rect.bottom():
            painter.setPen(pen_major if (idy % 5 == 0) else pen_minor)
            painter.drawLine(int(rect.left()), int(y), int(rect.right()), int(y))
            y += g; idy += 1

        # axes cross at (0,0)
        painter.setPen(QtGui.QPen(self.col_axis))
        painter.drawLine(0, int(rect.top()), 0, int(rect.bottom()))
        painter.drawLine(int(rect.left()), 0, int(rect.right()), 0)
        painter.restore()
