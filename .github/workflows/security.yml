name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run Bandit (SAST)
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ --severity-level high --confidence-level high

      - name: Run Safety (dependency vulnerabilities)
        run: |
          safety check --full-report --output safety-report.json || true
          safety check

      - name: Run Semgrep (semantic code analysis)
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

      - name: Create SARIF reports for GitHub Security tab
        run: |
          # Convert reports to SARIF format for GitHub Security tab
          python -c "
          import json
          import os

          # Create basic SARIF structure
          sarif = {
              '\$schema': 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemas/sarif-schema-2.1.0.json',
              'version': '2.1.0',
              'runs': []
          }

          # Try to convert bandit results
          try:
              if os.path.exists('bandit-report.json'):
                  with open('bandit-report.json', 'r') as f:
                      bandit_data = json.load(f)

                  results = []
                  for issue in bandit_data.get('results', []):
                      for issue_detail in issue.get('issues', []):
                          results.append({
                              'ruleId': issue_detail.get('test_id', 'unknown'),
                              'message': {'text': issue_detail.get('text', '')},
                              'locations': [{
                                  'physicalLocation': {
                                      'artifactLocation': {
                                          'uri': issue_detail.get('filename', '')
                                      },
                                      'region': {
                                          'startLine': issue_detail.get('line_number', 1)
                                      }
                                  }
                              }],
                              'level': 'warning' if issue_detail.get('severity') == 'LOW' else 'error'
                          })

                  if results:
                      sarif['runs'].append({
                          'tool': {'driver': {'name': 'Bandit'}},
                          'results': results
                      })

          except Exception as e:
              print(f'Bandit SARIF conversion failed: {e}')

          # Write SARIF file
          with open('security.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          "

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: security.sarif
        if: always()

      - name: Security scan summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- Bandit SAST: $([ -f bandit-report.json ] && echo 'Completed' || echo 'Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- Safety dependencies: $([ -f safety-report.json ] && echo 'Completed' || echo 'Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep analysis: $([ -f semgrep-report.json ] && echo 'Completed' || echo 'Failed')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“Š **Reports uploaded as artifacts**" >> $GITHUB_STEP_SUMMARY