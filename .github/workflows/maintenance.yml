name: Maintenance

on:
  schedule:
    # Run weekly maintenance
    - cron: '0 3 * * 1'  # Every Monday at 3 AM UTC
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        type: choice
        options:
          - all
          - dependencies
          - security
          - cleanup
          - backup

jobs:
  dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'dependencies'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Update dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

          # Update requirements.txt
          pip-compile --upgrade --output-file requirements.txt pyproject.toml
          pip-compile --upgrade --output-file requirements-dev.txt pyproject.toml --extra dev

          # Check for outdated packages
          pip list --outdated --format=json > outdated.json

      - name: Create dependency update PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "🔄 Weekly Dependency Updates"
          body: |
            ## 🔄 Weekly Dependency Updates

            This PR updates project dependencies to their latest compatible versions.

            ### Changes
            - Updated `requirements.txt`
            - Updated `requirements-dev.txt`
            - Checked for security vulnerabilities

            ### Testing
            - All existing tests should pass
            - No breaking changes expected

            ---
            🤖 This PR was automatically created by the maintenance workflow.
          branch: maintenance/dependencies
          delete-branch: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'security'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit

      - name: Run security audit
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY

          echo "### Safety (PyPI packages)" >> $GITHUB_STEP_SUMMARY
          safety check --full-report --output safety-report.json || echo "❌ Safety check failed" >> $GITHUB_STEP_SUMMARY
          safety check --short-report || echo "⚠️  Vulnerabilities found" >> $GITHUB_STEP_SUMMARY

          echo "### Bandit (SAST)" >> $GITHUB_STEP_SUMMARY
          bandit -r app/ -f json -o bandit-report.json || echo "❌ Bandit scan failed" >> $GITHUB_STEP_SUMMARY
          HIGH_ISSUES=$(python -c "import json; data=json.load(open('bandit-report.json')); print(len([i for i in data.get('results', []) if any(issue.get('severity') == 'HIGH' for issue in i.get('issues', []))]))")
          echo "High severity issues: $HIGH_ISSUES" >> $GITHUB_STEP_SUMMARY

          echo "### Pip Audit" >> $GITHUB_STEP_SUMMARY
          pip-audit --format json > pip-audit-report.json || echo "❌ Pip audit failed" >> $GITHUB_STEP_SUMMARY

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-maintenance-${{ github.run_id }}
          path: |
            safety-report.json
            bandit-report.json
            pip-audit-report.json

      - name: Create security issue if vulnerabilities found
        if: failure()
        run: |
          HIGH_COUNT=$(python -c "import json; data=json.load(open('bandit-report.json')); print(len([i for i in data.get('results', []) if any(issue.get('severity') == 'HIGH' for issue in i.get('issues', []))]))" 2>/dev/null || echo "0")

          if [[ "$HIGH_COUNT" -gt 0 ]]; then
            echo "🔴 High-severity security issues found: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY

            # Create GitHub issue
            gh issue create \
              --title "🚨 Security Vulnerabilities Detected" \
              --body "Automated security scan found $HIGH_COUNT high-severity issues. Check the security reports for details." \
              --label "security,automated"
          fi

  cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'cleanup'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old workflow runs
        run: |
          # Delete workflow runs older than 30 days
          gh run list --limit 100 --json databaseId,createdAt --jq '.[] | select(.createdAt < now - 30*24*3600) | .databaseId' | xargs -I {} gh run delete {} || true

      - name: Clean up old artifacts
        run: |
          # Delete artifacts older than 7 days
          gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.created_at < now - 7*24*3600) | .id' | xargs -I {} gh api -X DELETE repos/${{ github.repository }}/actions/artifacts/{} || true

      - name: Clean up old packages
        run: |
          # Delete package versions older than 30 days (keep last 5)
          gh api repos/${{ github.repository }}/packages?package_type=container --jq '.[] | .versions[5:][] | select(.created_at < now - 30*24*3600) | .id' | xargs -I {} gh api -X DELETE repos/${{ github.repository }}/packages/{}/versions/{} || true

      - name: Repository maintenance summary
        run: |
          echo "## 🧹 Repository Maintenance Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- Cleaned up old workflow runs" >> $GITHUB_STEP_SUMMARY
          echo "- Removed old artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Cleaned up old packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Repository is now optimized for performance! 🚀" >> $GITHUB_STEP_SUMMARY

  backup:
    name: Create Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'backup'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create repository backup
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_NAME="autofire_backup_${TIMESTAMP}"

          # Create backup archive
          tar -czf ${BACKUP_NAME}.tar.gz \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='.venv' \
            --exclude='dist' \
            --exclude='build' \
            .

          # Calculate checksum
          sha256sum ${BACKUP_NAME}.tar.gz > ${BACKUP_NAME}.sha256

          echo "Backup created: ${BACKUP_NAME}.tar.gz"
          ls -lh ${BACKUP_NAME}.*

      - name: Upload backup
        uses: actions/upload-artifact@v3
        with:
          name: repository-backup-${{ github.run_id }}
          path: autofire_backup_*.tar.gz
          retention-days: 30

      - name: Backup summary
        run: |
          BACKUP_SIZE=$(ls -lh autofire_backup_*.tar.gz | awk '{print $5}')
          BACKUP_NAME=$(ls autofire_backup_*.tar.gz)

          echo "## 💾 Repository Backup Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backup File:** \`${BACKUP_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Size:** ${BACKUP_SIZE}" >> $GITHUB_STEP_SUMMARY
          echo "**Retention:** 30 days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Backup Contents:" >> $GITHUB_STEP_SUMMARY
          echo "- Source code" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration files" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation" >> $GITHUB_STEP_SUMMARY
          echo "- Test files" >> $GITHUB_STEP_SUMMARY
          echo "- CI/CD workflows" >> $GITHUB_STEP_SUMMARY

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Repository health analysis
        run: |
          echo "## 🏥 Repository Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check branch protection
          echo "### Branch Protection" >> $GITHUB_STEP_SUMMARY
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)
          PROTECTION=$(gh api repos/${{ github.repository }}/branches/${DEFAULT_BRANCH}/protection 2>/dev/null || echo "none")

          if [[ "$PROTECTION" == "none" ]]; then
            echo "❌ No branch protection on default branch" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Branch protection enabled" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for large files
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Large Files Check" >> $GITHUB_STEP_SUMMARY
          LARGE_FILES=$(find . -type f -size +50M 2>/dev/null | wc -l)
          if [[ "$LARGE_FILES" -gt 0 ]]; then
            echo "⚠️  Found $LARGE_FILES files larger than 50MB" >> $GITHUB_STEP_SUMMARY
            find . -type f -size +50M -exec ls -lh {} \; 2>/dev/null >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No large files found" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for sensitive data
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Check" >> $GITHUB_STEP_SUMMARY
          SENSITIVE_FILES=$(grep -r "password\|secret\|token\|key" --include="*.py" --include="*.json" --include="*.yml" --include="*.yaml" . 2>/dev/null | grep -v "test" | grep -v "example" | wc -l)
          if [[ "$SENSITIVE_FILES" -gt 0 ]]; then
            echo "⚠️  Found potential sensitive data patterns in $SENSITIVE_FILES locations" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No obvious sensitive data patterns found" >> $GITHUB_STEP_SUMMARY
          fi

          # Check CI status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CI/CD Status" >> $GITHUB_STEP_SUMMARY
          WORKFLOWS=$(gh workflow list --json name,state | jq '.[] | select(.state == "active") | .name' | wc -l)
          echo "✅ $WORKFLOWS active workflows" >> $GITHUB_STEP_SUMMARY

          # Repository metrics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Repository Metrics" >> $GITHUB_STEP_SUMMARY
          COMMITS=$(git rev-list --count HEAD)
          CONTRIBUTORS=$(git shortlog -sn --no-merges | wc -l)
          echo "📊 $COMMITS commits, $CONTRIBUTORS contributors" >> $GITHUB_STEP_SUMMARY

          LINES_CODE=$(find . -name "*.py" -exec wc -l {} \; 2>/dev/null | awk '{sum += $1} END {print sum}')
          echo "📝 $LINES_CODE lines of Python code" >> $GITHUB_STEP_SUMMARY

  summary:
    name: Maintenance Summary
    needs: [dependencies, security-audit, cleanup, backup, health-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Maintenance Summary
        run: |
          echo "## 🔧 Maintenance Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Task Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: ${{ needs.dependencies.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cleanup: ${{ needs.cleanup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backup: ${{ needs.backup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: ${{ needs.health-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Repository maintenance completed successfully! 🛠️" >> $GITHUB_STEP_SUMMARY