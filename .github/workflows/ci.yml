name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Fast feedback job for linting and basic checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check .

      - name: Type check (mypy)
        run: |
          pip install mypy
          mypy . --ignore-missing-imports || true  # Allow mypy to fail for now

  # Comprehensive test suite
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest-cov pytest-xvfb pytest-qt

      - name: Run tests (Linux - headless)
        if: matrix.os == 'ubuntu-latest'
        run: |
          xvfb-run -a pytest --cov=app --cov-report=xml --cov-report=term-missing -v -m "not gui"

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing -v -m "not gui" --tb=short

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.os }}

  # Integration tests for system configuration
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: sudo apt-get install -y xvfb

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest-cov pytest-xvfb

      - name: Run integration tests
        run: |
          xvfb-run -a pytest tests/ -k "integration or system" -v --tb=short

      - name: Test system configuration workflow
        run: |
          xvfb-run -a python -c "
          import sys
          sys.path.insert(0, '.')
          from app.system_builder import SystemConfiguration
          from app.model_space_window import ModelSpaceWindow
          from unittest.mock import Mock

          # Test system configuration creation
          system = SystemConfiguration('Test System')
          assert system.name == 'Test System'
          assert system.facp_type == 'Conventional'

          # Test serialization
          data = system.to_dict()
          assert data['name'] == 'Test System'

          # Test deserialization
          system2 = SystemConfiguration.from_dict(data)
          assert system2.name == 'Test System'

          print('System configuration integration test passed!')
          "

  # Performance and load testing
  performance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest-benchmark

      - name: Run performance tests
        run: |
          python -c "
          import time
          from app.system_builder import SystemConfiguration

          # Performance test for system configuration
          start = time.time()
          systems = []
          for i in range(100):
              system = SystemConfiguration(f'PerfTest_{i}')
              system.devices['smoke_detectors'] = [{'manufacturer': 'Test', 'part_number': f'P{i}'} for _ in range(10)]
              systems.append(system)

          end = time.time()
          print(f'Created 100 systems with devices in {end-start:.2f} seconds')
          print(f'Average time per system: {(end-start)/100:.4f} seconds')
          "

  # Build and packaging test
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Test build process
        run: |
          python -c "
          import sys
          import os
          sys.path.insert(0, '.')

          # Test imports work
          try:
              from app.main import main
              from app.system_builder import SystemConfiguration
              from app.model_space_window import ModelSpaceWindow
              print('All main imports successful')
          except Exception as e:
              print(f'Import error: {e}')
              sys.exit(1)

          # Test system configuration integration
          try:
              system = SystemConfiguration('Build Test')
              system.devices['smoke_detectors'] = [{'manufacturer': 'Test', 'part_number': 'TEST001'}]
              data = system.to_dict()
              system2 = SystemConfiguration.from_dict(data)
              assert system2.name == 'Build Test'
              print('System configuration serialization works')
          except Exception as e:
              print(f'System config error: {e}')
              sys.exit(1)
          "

  # Security and dependency scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Security scan (safety)
        run: safety check --full-report || true

      - name: Security scan (bandit)
        run: bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  # Documentation and API testing
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme

      - name: Check documentation
        run: |
          # Basic docstring check
          python -c "
          import ast
          import os

          def check_docstrings(file_path):
              try:
                  with open(file_path, 'r') as f:
                      tree = ast.parse(f.read())

                  functions_without_docs = []
                  classes_without_docs = []

                  for node in ast.walk(tree):
                      if isinstance(node, ast.FunctionDef) and not ast.get_docstring(node):
                          functions_without_docs.append(node.name)
                      elif isinstance(node, ast.ClassDef) and not ast.get_docstring(node):
                          classes_without_docs.append(node.name)

                  return functions_without_docs, classes_without_docs
              except:
                  return [], []

          # Check key files
          key_files = ['app/system_builder.py', 'app/model_space_window.py', 'app/main.py']
          for file in key_files:
              if os.path.exists(file):
                  funcs, classes = check_docstrings(file)
                  print(f'{file}: {len(funcs)} functions, {len(classes)} classes without docstrings')
          "

  # Final status check
  ci-success:
    needs: [lint, test, integration-test, performance, build, security, docs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: CI Status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Integration: ${{ needs.integration-test.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docs: ${{ needs.docs.result }}"

          # Fail if any critical jobs failed
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-test.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "Critical CI jobs failed"
            exit 1
          else
            echo "All critical CI jobs passed"
          fi
