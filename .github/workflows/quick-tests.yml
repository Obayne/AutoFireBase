name: quick-tests

# Trigger only when files under `app/` or `tests/` (or this workflow) change to save CI cycles.
on:
  push:
    paths:
      - 'app/**'
      - 'tests/**'
      - '.github/workflows/quick-tests.yml'
    branches: ['main', 'feat/**', '*']
  pull_request:
    paths:
      - 'app/**'
      - 'tests/**'
      - '.github/workflows/quick-tests.yml'
    branches: ['main']

jobs:
  quick-tests:
    name: Quick focused tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python: [3.11]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pytest
          fi
        shell: bash

      - name: Run focused tests (Linux uses xvfb)
        # Note: headless startup test (tests/test_headless_startup.py) intentionally included for CI smoke-start
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          # install X virtual framebuffer and try multiple common Mesa/EGL runtime package names
          # (different GitHub runner images / Ubuntu releases may provide different package names)
          for pkg in xvfb libegl1-mesa libegl-mesa0 libgl1-mesa-glx libgl1 libgl1-mesa-dri libgles2-mesa; do
            echo "Attempting to install $pkg (if available)"
            sudo apt-get install -y "$pkg" || echo "Package $pkg not available on this runner, continuing"
          done
          # Build a list of test files to run. If any of the desired focused tests are missing,
          # fall back to running the headless startup test which is available and acts as a smoke test.
          ARGS=""
          for base in \
            test_placement_settings_persistence.py \
            test_device_device_id_roundtrip.py \
            test_place_into_drawing_adds_devices.py \
            test_device_device_palette_thumbnail.py \
            test_device_palette_thumbnail.py \
            test_save_load_integration.py; do
            f1="tests/$base"
            f2="AutoFireBase/tests/$base"
            if [ -f "$f1" ]; then
              ARGS="$ARGS $f1"
            elif [ -f "$f2" ]; then
              ARGS="$ARGS $f2"
            else
              echo "Optional test $base not found in tests/ or AutoFireBase/tests/; skipping"
            fi
          done
          # Always include the headless startup smoke test from whichever location exists
          if [ -f "tests/test_headless_startup.py" ]; then
            ARGS="$ARGS tests/test_headless_startup.py"
          elif [ -f "AutoFireBase/tests/test_headless_startup.py" ]; then
            ARGS="$ARGS AutoFireBase/tests/test_headless_startup.py"
          else
            echo "ERROR: headless startup test missing in both tests/ and AutoFireBase/tests/ - aborting"
            exit 1
          fi
          echo "Running pytest on: $ARGS"
          xvfb-run -s '-screen 0 1024x768x24' pytest -q $ARGS
        shell: bash

      - name: Run focused tests (Windows)
        if: runner.os == 'Windows'
        run: |
          # Ensure Qt runs headless on Windows runners
          $env:QT_QPA_PLATFORM = 'minimal'
          # Build a list of optional focused tests; include the headless startup smoke test always.
          $args = ""
          $optional = @( \
            'test_placement_settings_persistence.py', \
            'test_device_device_id_roundtrip.py', \
            'test_place_into_drawing_adds_devices.py', \
            'test_device_palette_thumbnail.py', \
            'test_save_load_integration.py' \
          )
          foreach ($b in $optional) {
            $t1 = Join-Path 'tests' $b
            $t2 = Join-Path 'AutoFireBase/tests' $b
            if (Test-Path $t1) { $args = "$args $t1" } elseif (Test-Path $t2) { $args = "$args $t2" } else { Write-Host "Optional test $b not found; skipping" }
          }
          $h1 = 'tests/test_headless_startup.py'
          $h2 = 'AutoFireBase/tests/test_headless_startup.py'
          if (Test-Path $h1) { $args = "$args $h1" } elseif (Test-Path $h2) { $args = "$args $h2" } else { Write-Host "ERROR: headless startup test missing in both locations"; exit 1 }
          Write-Host "Running pytest on: $args"
          pytest -q $args
        shell: powershell
