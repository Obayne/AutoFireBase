name: Seed Sprint Issues

on:
  workflow_dispatch:
  push:
    branches:
      - chore/dev-setup-warnings
    paths:
      - .github/seed_issues.json
      - .github/workflows/seed-issues.yml

jobs:
  seed:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create labels and issues from seed file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/seed_issues.json';
            const payload = JSON.parse(fs.readFileSync(path, 'utf8'));

            // Ensure labels exist
            const existingLabels = await github.paginate(github.rest.issues.listLabelsForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            const existing = new Set(existingLabels.map(l => l.name));
            const needed = new Set(payload.flatMap(i => i.labels || []));
            for (const name of needed) {
              if (!existing.has(name)) {
                core.info(`Creating missing label: ${name}`);
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name,
                  color: '0e8a16',
                  description: 'Auto-created by seed-issues workflow',
                }).catch(e => core.warning(`Failed to create label ${name}: ${e.message}`));
              }
            }

            // Fetch existing open issues to avoid duplicates by title
            const allOpenIssues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100,
            });
            const openTitles = new Set(allOpenIssues.map(i => i.title));

            for (const item of payload) {
              if (openTitles.has(item.title)) {
                core.info(`Issue already exists: ${item.title}`);
                continue;
              }
              core.info(`Creating issue: ${item.title}`);
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: item.title,
                body: item.body,
                labels: item.labels,
              });
            }
