name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly performance tests
    - cron: '0 1 * * *'  # Every day at 1 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - system_creation
          - device_loading
          - serialization
          - ui_rendering

jobs:
  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    outputs:
      baseline: ${{ steps.baseline.outputs.baseline }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark

      - name: Run performance baseline
        id: baseline
        run: |
          python -c "
          import time
          import json
          from app.system_builder import SystemConfiguration

          results = {}

          # System creation performance
          start = time.time()
          systems = []
          for i in range(100):
              system = SystemConfiguration(f'PerfTest_{i}')
              system.devices['smoke_detectors'] = [
                  {'manufacturer': f'Mfg_{j}', 'part_number': f'PN_{j}'}
                  for j in range(10)
              ]
              systems.append(system)
          creation_time = time.time() - start
          results['system_creation_100'] = creation_time

          # Serialization performance
          start = time.time()
          serialized = [s.to_dict() for s in systems]
          serialize_time = time.time() - start
          results['serialization_100'] = serialize_time

          # Deserialization performance
          start = time.time()
          deserialized = [SystemConfiguration.from_dict(s) for s in serialized]
          deserialize_time = time.time() - start
          results['deserialization_100'] = deserialize_time

          # Device loading performance
          start = time.time()
          from app import catalog
          devices = catalog.load_catalog()
          load_time = time.time() - start
          results['device_catalog_load'] = load_time
          results['device_count'] = len(devices)

          # Write results
          with open('performance-baseline.json', 'w') as f:
              json.dump(results, f, indent=2)

          print('Performance baseline results:')
          for key, value in results.items():
              print(f'  {key}: {value:.4f}s' if isinstance(value, float) else f'  {key}: {value}')

          # Set output
          print(f'::set-output name=baseline::{json.dumps(results)}')
          "

      - name: Upload baseline results
        uses: actions/upload-artifact@v3
        with:
          name: performance-baseline-${{ github.run_id }}
          path: performance-baseline.json

  performance-comparison:
    name: Performance Comparison
    runs-on: ubuntu-latest
    needs: performance-baseline
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download baseline
        uses: actions/download-artifact@v3
        with:
          name: performance-baseline-${{ github.run_id }}

      - name: Compare performance
        run: |
          python -c "
          import json
          import os

          # Load baseline results
          with open('performance-baseline.json', 'r') as f:
              baseline = json.load(f)

          print('Performance Comparison Results:')
          print('=' * 50)

          # Define acceptable degradation thresholds (in percent)
          thresholds = {
              'system_creation_100': 10,  # 10% degradation allowed
              'serialization_100': 5,
              'deserialization_100': 5,
              'device_catalog_load': 15
          }

          all_passed = True
          for metric, threshold in thresholds.items():
              if metric in baseline:
                  baseline_value = baseline[metric]
                  # For comparison, we'd need to run the same tests on the PR
                  # For now, just report the baseline
                  print(f'{metric}: {baseline_value:.4f}s (threshold: {threshold}%)')

          print('')
          print('âœ… Performance check completed')
          "

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'load'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust

      - name: Create load test script
        run: |
          cat > load_test.py << 'EOF'
          from locust import HttpUser, task, between
          import json
          import sys
          import os

          # Add app to path
          sys.path.insert(0, '/home/runner/work/AutoFireBase/AutoFireBase')

          class SystemLoadTest(HttpUser):
              wait_time = between(1, 3)

              @task
              def create_system(self):
                  """Simulate creating a system configuration"""
                  from app.system_builder import SystemConfiguration

                  system = SystemConfiguration("LoadTest")
                  system.devices['smoke_detectors'] = [
                      {'manufacturer': 'Test', 'part_number': f'PN_{i}'}
                      for i in range(50)
                  ]

                  # Serialize (simulates API call)
                  data = system.to_dict()
                  assert len(data['devices']['smoke_detectors']) == 50

              @task
              def load_devices(self):
                  """Simulate loading device catalog"""
                  from app import catalog
                  devices = catalog.load_catalog()
                  assert len(devices) > 0

              @task
              def serialize_large_system(self):
                  """Test serialization of large systems"""
                  from app.system_builder import SystemConfiguration

                  system = SystemConfiguration("LargeSystem")
                  for device_type in system.devices.keys():
                      system.devices[device_type] = [
                          {'manufacturer': f'Mfg_{i}', 'part_number': f'PN_{i}'}
                          for i in range(100)
                      ]

                  data = system.to_dict()
                  assert len(data['devices']['smoke_detectors']) == 100
          EOF

      - name: Run load test
        run: |
          # Run a quick load test
          python -c "
          import time
          from load_test import SystemLoadTest

          print('Running load test simulation...')

          # Simulate concurrent users
          start_time = time.time()
          users = []

          for i in range(10):  # 10 concurrent users
              user = SystemLoadTest()
              users.append(user)

          # Run tasks
          tasks_completed = 0
          for user in users:
              for _ in range(5):  # 5 tasks per user
                  user.create_system()
                  user.load_devices()
                  user.serialize_large_system()
                  tasks_completed += 3

          end_time = time.time()
          duration = end_time - start_time

          print(f'Load test completed:')
          print(f'  Tasks completed: {tasks_completed}')
          print(f'  Duration: {duration:.2f}s')
          print(f'  Tasks/second: {tasks_completed/duration:.2f}')
          print(f'  Average response time: {(duration/tasks_completed)*1000:.2f}ms')
          "

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install memory-profiler psutil

      - name: Run memory profiling
        run: |
          python -c "
          import psutil
          import os
          from app.system_builder import SystemConfiguration
          from app import catalog

          process = psutil.Process(os.getpid())

          print('Memory profiling results:')
          print('=' * 40)

          # Baseline memory
          baseline_mem = process.memory_info().rss / 1024 / 1024  # MB
          print(f'Baseline memory: {baseline_mem:.2f} MB')

          # Load device catalog
          devices = catalog.load_catalog()
          catalog_mem = process.memory_info().rss / 1024 / 1024
          catalog_delta = catalog_mem - baseline_mem
          print(f'After loading {len(devices)} devices: {catalog_mem:.2f} MB (+{catalog_delta:.2f} MB)')

          # Create systems
          systems = []
          for i in range(50):
              system = SystemConfiguration(f'MemTest_{i}')
              system.devices['smoke_detectors'] = [
                  {'manufacturer': f'Mfg_{j}', 'part_number': f'PN_{j}'}
                  for j in range(20)
              ]
              systems.append(system)

          systems_mem = process.memory_info().rss / 1024 / 1024
          systems_delta = systems_mem - catalog_mem
          print(f'After creating 50 systems: {systems_mem:.2f} MB (+{systems_delta:.2f} MB)')

          # Serialize all systems
          serialized = [s.to_dict() for s in systems]
          serialized_mem = process.memory_info().rss / 1024 / 1024
          serialized_delta = serialized_mem - systems_mem
          print(f'After serializing: {serialized_mem:.2f} MB (+{serialized_delta:.2f} MB)')

          print('')
          print('Memory efficiency assessment:')
          memory_per_system = systems_delta / 50
          print(f'  Memory per system: {memory_per_system:.2f} MB')
          memory_per_device = catalog_delta / len(devices) if devices else 0
          print(f'  Memory per device: {memory_per_device:.4f} MB')
          "